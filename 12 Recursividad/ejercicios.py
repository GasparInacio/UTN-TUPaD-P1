"""
1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
entre 1 y el n√∫mero que indique el usuario
"""


def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)


def ejercicio1():
    num_final = input('Ingresar un n√∫mero entero positivo: ')
    try:
        num_final = int(num_final)
        if num_final > 0:
            for i in range(1, num_final + 1):
                print(f'{i}! = ', factorial(i))
        else:
            print('Debe ser un n√∫mero entero positivo')
    except ValueError:
        print('Debe ser un numero entero positivo')


"""2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n 
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario 
especifique.
"""


def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)


def ejercicio2():
    posicion = input('Ingrese un n√∫mero entero positivo: ')

    try:
        posicion = int(posicion)
        if posicion >= 0:
            for i in range(0, posicion + 1):
                print(f'{i} = ', fibonacci(i))
        else:
            print('Debe ser un numero entero positivo')
    except ValueError:
        print('Debe ser un numero entero positivo')


"""
3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un 
exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un 
algoritmo general. 
"""


def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)


def ejercicio3():
    try:
        base = int(input('ingrese un n√∫mero para la base: '))
        exponente = int(input('ingrese un exponente para la base: '))

        if exponente >= 0:
            resultado = potencia(base, exponente)
            print(f'{base} ** {exponente} = {resultado}')
        else:
            print('El exponente debe ser un numero entero positivo')
    except ValueError:
        print('Debe ser un numero entero positivo')


"""
4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base 
decimal y devuelva su representaci√≥n en binario como una cadena de texto.
"""


def binario(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        return binario(n // 2) + str(n % 2)


def ejercicio4():
    num = input('Ingresar n√∫mero entero positivo: ')

    try:
        num = int(num)
        if num >= 0:
            resultado = binario(num)
            print(f'N√∫mero en decimal {num} = {resultado} en binario')
        else:
            print('Ingrese un numero entero positivo')
    except ValueError:
        print('Debe ser un numero entero positivo')


"""
5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una 
cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no 
lo es. 
Requisitos: 
La soluci√≥n debe ser recursiva. 
No se debe usar [::-1] ni la funci√≥n reversed(). 
"""


def palindromo(palabra, izquierda=0, derecha=None):
    if derecha is None:
        derecha = len(palabra) - 1

    if izquierda >= derecha:
        return True
    elif palabra[izquierda] != palabra[derecha]:
        return False
    else:
        return palindromo(palabra, izquierda + 1, derecha - 1)


def ejercicio5():
    palabra = input('Ingresar palabra: ')

    if palindromo(palabra):
        print(f'{palabra} es palindromo')
    else:
        print(f'{palabra} no es palindromo')


"""
6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un 
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos. 
Restricciones: 
No se puede convertir el n√∫mero a string. 
Us√° operaciones matem√°ticas (%, //) y recursi√≥n. 
Ejemplos: 
suma_digitos(1234)   ‚Üí 10  (1 + 2 + 3 + 4) 
suma_digitos(9)      ‚Üí 9 
suma_digitos(305)    ‚Üí 8   (3 + 0 + 5) 
"""


def suma_digitos(n):
    if n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)


def ejercicio6():
    try:
        numero = int(input("Ingrese un n√∫mero entero positivo: "))
        if numero >= 0:
            resultado = suma_digitos(numero)
            print(f"La suma de los d√≠gitos de {numero} es: {resultado}")
        else:
            print("Ingrese un n√∫mero entero positivo.")
    except ValueError:
        print("Ingrese un n√∫mero entero.")


"""
7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n 
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al 
√∫ltimo nivel con un solo bloque. 
"""


def total_bloques(n):
    if n == 1:
        return 1
    else:
        return n + total_bloques(n - 1)


def ejercicio7():
    try:
        n = int(input("Ingresar el n√∫mero de bloques del primer nivel: "))
        if n >= 1:
            total = total_bloques(n)
            print(f"El total de bloques en la pir√°mide es: {total}")
        else:
            print("Debe ingresar un n√∫mero entero positivo.")
    except ValueError:
        print("Ingrese un n√∫mero entero positivo.")


"""8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un 
n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces 
aparece ese d√≠gito dentro del n√∫mero. 
      Ejemplos: 
contar_digito(12233421, 2)   ‚Üí 3   
contar_digito(5555, 5)       ‚Üí 4  
"""


def contar_digito(numero, digito):
    if numero == 0:
        return 0
    else:
        return (1 if numero % 10 == digito else 0) + contar_digito(numero // 10, digito)


def ejercicio8():
    try:
        numero = int(input("Ingrese un n√∫mero entero positivo: "))
        digito = int(input("Ingrese el d√≠gito que quiere contar: "))

        if 0 <= digito <= 9:
            resultado = contar_digito(numero, digito)
            print(f"El d√≠gito {digito} aparece {resultado} veces en el n√∫mero {numero}.")
        else:
            print("El d√≠gito debe estar entre 0 y 9.")
    except ValueError:
        print("Ingresar un n√∫mero entero y un d√≠gito entre 0 y 9.")
